// <auto-generated />
using System;
using FierceStukCloud.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FierceStukCloud.EntityFramework.Migrations
{
    [DbContext(typeof(FierceStukCloudDbContext))]
    [Migration("20200928072756_InitFull")]
    partial class InitFull
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FierceStukCloud.Core.Album", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnName("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserLogin")
                        .HasColumnName("UserLogin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Year")
                        .HasColumnName("Year")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("FierceStukCloud.Core.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnName("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("FierceStukCloud.Core.Extension.ManyToMany.AlbumAuthor", b =>
                {
                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AlbumId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("AlbumAuthor");
                });

            modelBuilder.Entity("FierceStukCloud.Core.Extension.ManyToMany.SongAlbum", b =>
                {
                    b.Property<Guid>("SongId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SongId", "AlbumId");

                    b.HasIndex("AlbumId");

                    b.ToTable("SongAlbum");
                });

            modelBuilder.Entity("FierceStukCloud.Core.Extension.ManyToMany.SongAuthor", b =>
                {
                    b.Property<Guid>("SongId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SongId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("SongAuthor");
                });

            modelBuilder.Entity("FierceStukCloud.Core.Extension.ManyToMany.SongPlayList", b =>
                {
                    b.Property<Guid>("SongId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Place")
                        .HasColumnType("int");

                    b.HasKey("SongId", "PlayListId");

                    b.HasIndex("PlayListId");

                    b.ToTable("SongPlayList");
                });

            modelBuilder.Entity("FierceStukCloud.Core.LocalFolder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LocalUrl")
                        .HasColumnName("LocalUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OnDevice")
                        .HasColumnName("OnDevice")
                        .HasColumnType("bit");

                    b.Property<bool>("OnServer")
                        .HasColumnName("OnServer")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnName("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserLogin")
                        .HasColumnName("UserLogin")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LocalFolders");
                });

            modelBuilder.Entity("FierceStukCloud.Core.PlayList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnName("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnName("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OnDevice")
                        .HasColumnName("OnDevice")
                        .HasColumnType("bit");

                    b.Property<bool>("OnServer")
                        .HasColumnName("OnServer")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnName("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserLogin")
                        .HasColumnName("UserLogin")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlayLists");
                });

            modelBuilder.Entity("FierceStukCloud.Core.Song", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnName("Duration")
                        .HasColumnType("time");

                    b.Property<bool>("IsFavorite")
                        .HasColumnName("Favorite")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LocalFolderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LocalUrl")
                        .HasColumnName("LocalUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OnDevice")
                        .HasColumnName("OnDevice")
                        .HasColumnType("bit");

                    b.Property<bool>("OnServer")
                        .HasColumnName("OnServer")
                        .HasColumnType("bit");

                    b.Property<string>("OptionalInfo")
                        .HasColumnName("OptionalInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnName("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserLogin")
                        .HasColumnName("UserLogin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Year")
                        .HasColumnName("Year")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LocalFolderId");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("FierceStukCloud.Core.Extension.ManyToMany.AlbumAuthor", b =>
                {
                    b.HasOne("FierceStukCloud.Core.Album", "Album")
                        .WithMany("DbAuthors")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FierceStukCloud.Core.Author", "Author")
                        .WithMany("DbAlbums")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FierceStukCloud.Core.Extension.ManyToMany.SongAlbum", b =>
                {
                    b.HasOne("FierceStukCloud.Core.Album", "Album")
                        .WithMany("DbSongs")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FierceStukCloud.Core.Song", "Song")
                        .WithMany("DbAlbums")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FierceStukCloud.Core.Extension.ManyToMany.SongAuthor", b =>
                {
                    b.HasOne("FierceStukCloud.Core.Author", "Author")
                        .WithMany("DbSongs")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FierceStukCloud.Core.Song", "Song")
                        .WithMany("DbAuthors")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FierceStukCloud.Core.Extension.ManyToMany.SongPlayList", b =>
                {
                    b.HasOne("FierceStukCloud.Core.PlayList", "PlayList")
                        .WithMany("DbSongs")
                        .HasForeignKey("PlayListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FierceStukCloud.Core.Song", "Song")
                        .WithMany("DbPlayLists")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FierceStukCloud.Core.Song", b =>
                {
                    b.HasOne("FierceStukCloud.Core.LocalFolder", "LocalFolder")
                        .WithMany()
                        .HasForeignKey("LocalFolderId");
                });
#pragma warning restore 612, 618
        }
    }
}
