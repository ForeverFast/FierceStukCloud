// <auto-generated />
using System;
using FierceStukCloud.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FierceStukCloud.EntityFramework.Migrations
{
    [DbContext(typeof(FierceStukCloudDbContext))]
    partial class FierceStukCloudDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("AlbumAuthor", b =>
                {
                    b.Property<Guid>("AlbumsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AlbumsId", "AuthorsId");

                    b.HasIndex("AuthorsId");

                    b.ToTable("AlbumAuthor");
                });

            modelBuilder.Entity("AlbumSong", b =>
                {
                    b.Property<Guid>("AlbumsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SongsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AlbumsId", "SongsId");

                    b.HasIndex("SongsId");

                    b.ToTable("AlbumSong");
                });

            modelBuilder.Entity("AuthorSong", b =>
                {
                    b.Property<Guid>("AuthorsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SongsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AuthorsId", "SongsId");

                    b.HasIndex("SongsId");

                    b.ToTable("AuthorSong");
                });

            modelBuilder.Entity("FierceStukCloud.Core.Album", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title");

                    b.Property<string>("UserLogin")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UserLogin");

                    b.Property<long>("Year")
                        .HasColumnType("bigint")
                        .HasColumnName("Year");

                    b.HasKey("Id");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("FierceStukCloud.Core.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("FierceStukCloud.Core.LocalFolder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LocalUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LocalUrl");

                    b.Property<bool>("OnDevice")
                        .HasColumnType("bit")
                        .HasColumnName("OnDevice");

                    b.Property<bool>("OnServer")
                        .HasColumnType("bit")
                        .HasColumnName("OnServer");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title");

                    b.Property<string>("UserLogin")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UserLogin");

                    b.HasKey("Id");

                    b.ToTable("LocalFolders");
                });

            modelBuilder.Entity("FierceStukCloud.Core.PlayList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreationDate");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Image");

                    b.Property<bool>("OnDevice")
                        .HasColumnType("bit")
                        .HasColumnName("OnDevice");

                    b.Property<bool>("OnServer")
                        .HasColumnType("bit")
                        .HasColumnName("OnServer");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title");

                    b.Property<string>("UserLogin")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UserLogin");

                    b.HasKey("Id");

                    b.ToTable("PlayLists");
                });

            modelBuilder.Entity("FierceStukCloud.Core.Song", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time")
                        .HasColumnName("Duration");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("bit")
                        .HasColumnName("Favorite");

                    b.Property<Guid?>("LocalFolderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LocalUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LocalUrl");

                    b.Property<bool>("OnDevice")
                        .HasColumnType("bit")
                        .HasColumnName("OnDevice");

                    b.Property<bool>("OnServer")
                        .HasColumnType("bit")
                        .HasColumnName("OnServer");

                    b.Property<string>("OptionalInfo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OptionalInfo");

                    b.Property<Guid?>("PlayListId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title");

                    b.Property<string>("UserLogin")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UserLogin");

                    b.Property<long>("Year")
                        .HasColumnType("bigint")
                        .HasColumnName("Year");

                    b.HasKey("Id");

                    b.HasIndex("LocalFolderId");

                    b.HasIndex("PlayListId");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("AlbumAuthor", b =>
                {
                    b.HasOne("FierceStukCloud.Core.Album", null)
                        .WithMany()
                        .HasForeignKey("AlbumsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FierceStukCloud.Core.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlbumSong", b =>
                {
                    b.HasOne("FierceStukCloud.Core.Album", null)
                        .WithMany()
                        .HasForeignKey("AlbumsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FierceStukCloud.Core.Song", null)
                        .WithMany()
                        .HasForeignKey("SongsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AuthorSong", b =>
                {
                    b.HasOne("FierceStukCloud.Core.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FierceStukCloud.Core.Song", null)
                        .WithMany()
                        .HasForeignKey("SongsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FierceStukCloud.Core.Song", b =>
                {
                    b.HasOne("FierceStukCloud.Core.LocalFolder", "LocalFolder")
                        .WithMany("Songs")
                        .HasForeignKey("LocalFolderId");

                    b.HasOne("FierceStukCloud.Core.PlayList", null)
                        .WithMany("Songs")
                        .HasForeignKey("PlayListId");

                    b.Navigation("LocalFolder");
                });

            modelBuilder.Entity("FierceStukCloud.Core.LocalFolder", b =>
                {
                    b.Navigation("Songs");
                });

            modelBuilder.Entity("FierceStukCloud.Core.PlayList", b =>
                {
                    b.Navigation("Songs");
                });
#pragma warning restore 612, 618
        }
    }
}
